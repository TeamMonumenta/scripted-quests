{
	"type": "object",
	"defaultProperties": [],
	"additionalProperties": false,
	"properties": {
		"script_actor": {
			"title": "script_actor",
			"description": "Makes the specified actor execute a list of actions in order. Actions will execute one after another, meaning the next action in a list will not be executed until the previous one is finished. Actor Scripts can be overlap if they are called in succession in a cutscene script list, however it is not recommended to overlap certain actions together, such as move actions!",
			"type": "object",
			"properties": {
				"actor": {
					"title": "actor",
					"description": "The actor variable ID to make perform this script.",
					"type": "string"
				},
				"script": {
					"title": "script",
					"description": "The list of actions/scripts that this actor performs in order.",
					"type": "array",
					"items": {
						"title": "Script Action",
						"$ref": "cutscene_actor_action.json"
					}
				}
			}
		},
		"dialogue": {
			"title": "dialogue",
			"description": "Displays the given dialogue shown, using the specified actor as the speaker of the dialogue.",
			"type": "object",
			"properties": {
				"actor": {
					"title": "actor",
					"description": "The actor variable ID to make speak the dialogue. This can be left blank if no specific actor speaks this dialogue, however if no actor is provided then it is highly recommended that the display_name field below is filled in.",
					"type": "string"
				},
				"display_name": {
					"title": "display_name",
					"description": "The display name of the speaker of the dialogue. If left blank, it will automatically default to the Actor's name. If the actor field is blank and there is no display name, it is defaulted to '???'",
					"type": "string"
				},
				"dialogue": {
					"title": "dialogue",
					"description": "The dialogue to be spoken.",
					"type": "string"
				},
				"required_click": {
					"title": "required_click",
					"description": "Toggles on/off if the player is required to click the 'Next Dialogue' button in order to progress. If this option is toggled on, then the dialogue will act similar to a 'wait' function, in which the scene will not continue to execute actions until the player clicks to view the next dialogue. It is recommended to leave this toggled on for self-paced readability.",
					"type": "boolean",
					"default": true
				}
			}
		},
		"dialogue_choice": {
			"title": "dialogue_choice",
			"description": "Displays dialogue options that the player can choose from, which will play additional script lines depending on which dialogue option is chosen. The cutscene script will not continue until the player chooses an answer, so it acts similar to wait actions.",
			"type": "object",
			"properties": {
				"choice_prompt": {
					"title": "choice_prompt",
					"description": "The prompt that the dialogue choices aim to answer. This is also displayed above all of the dialogue choices so that way the player knows what they're answering.",
					"type": "string",
					"default": "What will you say?"
				},
				"common_script": {
					"title": "common_script",
					"description": "The common script that occurs at the beginning of each choice script. This is useful for when each choice script as a similar starting script to each other to help reduce redundancy.",
					"type": "array",
					"format": "tabs",
					"minItems": 1,
					"items": {
						"title": "Scene Line",
						"$ref": "cutscene_action.json"
					}
				},
				"choices": {
					"title": "choices",
					"description": "The list of choices that the player can choose from.",
					"format": "tabs",
					"type": "array",
					"items": {
						"headerTemplate": "{{self.prompt_response}}",
						"type": "object",
						"properties": {
                            "prompt_response": {
                                "title": "prompt_response",
                                "description": "The player's response. If you want to show the player's response as dialogue, you will have to manually do it with a script line.",
                                "type": "string"
                            },
							"script": {
								"title": "script",
                                "description": "The script that is played whenever the player chooses this prompt.",
								"type": "array",
								"format": "tabs",
								"minItems": 1,
								"items": {
									"title": "Scene Line",
									"$ref": "cutscene_action.json"
								}
							}
						}
					}
				}
			}
		},
		"path_camera": {
			"title": "path_camera",
			"description": "Paths the player camera along the specified path of points. At the end of the path, the camera halts and awaits the next path. If another path_camera action plays, the current one is cancelled. The first camera point in a path is the starting point.",
			"type": "array",
			"items": {
				"title": "Path Point",
				"type": "object",
				"properties": {
					"time": {
						"title": "time",
						"description": "The amount of time for the camera to reach this point. This number is in SECONDS, and has to be greater than 0.",
						"type": "number",
						"default": 1
					},
					"point": {
						"title": "point",
						"description": "The coordinate point to move to. The format for this is in x,y,z,yaw,pitch format.",
						"type": "string",
						"default": "0,0,0,0,0"
					}
				}
			}
		},
		"rotate_camera": {
			"title": "rotate_camera",
			"description": "Rotates the camera using a custom camera rotation that is recorded in-game. This rotation takes priority over the rotations of path_camera. If another rotate_camera action players, the current one is cancelled. Specify the ID of the camera rotation.",
			"type": "string",
			"default": "id"
		},
		"play_music": {
			"title": "play_music",
			"description": "Plays the specified music track on loop. If this field is empty, then any music being played is canceled, including music that was playing when the player entered the cutscene. All custom cutscene music that is playing is stopped when the cutscene is over.",
			"oneOf": [
				{
					"title": "Generic Control",
					"type": "string",
					"default": ""
				},
				{
					"title": "Custom Control",
					"type": "object",
					"properties": {
						"music": {
							"title": "music",
							"description": "The ID of the music piece.",
							"type": "string"
						},
						"fade_out_time": {
							"title": "fade_out_time",
							"description": "The time it takes for the music that was previously playing, if any, to fade out. This is in SECONDS, and can be a decimal.",
							"type": "number",
							"default": 1
						}
					}
				}
			]
		},
		"set_player_time": {
			"title": "set_player_time",
			"description": "Sets the player's time in-game. This is a clientsided time and only shows for the player, not everyone else, and will stay at the specific time until the player's time is reset. The player's time is reset back automatically when the cutscene ends. The integer is in Minecraft Tick Time.",
			"type": "integer",
			"default": 0
		},
		"reset_player_time": {
			"title": "reset_player_time",
			"description": "Resets the player's time in-game to sync up with the current, actual world time.",
			"type": "boolean",
			"default": true
		},
		"fade_in": {
			"title": "fade_in",
			"description": "Causes a screen fade-in over the specified amount of time.",
			"type": "object",
			"properties": {
				"time": {
					"title": "time",
					"description": "The amount of time that the fade-in takes. This is in SECONDS, and can be decimals",
					"type": "number",
					"default": 0.0
				},
				"white": {
					"title": "white",
					"description": "Toggles whether or not this fade-in is white.",
					"type": "boolean",
					"default": false
				}
			}
		},
		"fade_out": {
			"title": "fade_out",
			"description": "Causes a screen fade-out over the specified amount of time. The fade-out will stay until the next fade-in occurs.",
			"type": "object",
			"properties": {
				"time": {
					"title": "time",
					"description": "The amount of time that the fade-out takes. This is in SECONDS, and can be decimals",
					"type": "number",
					"default": 0.0
				},
				"white": {
					"title": "white",
					"description": "Toggles whether or not this fade-out is white.",
					"type": "boolean",
					"default": false
				}
			}
		},
		"play_effects": {
			"title": "play_effects",
			"description": "Plays the specified effects at the specified location",
			"type": "object",
			"properties": {
				"location": {
					"description": "The location where the effects are played. This is in x,y,z format.",
					"type": "string",
					"default": "0,0,0"
				},
				"rate": {
					"description": "The rate at which to play the effects at periodically. This is in ticks.",
					"type": "integer",
					"default": 1
				},
				"iterations": {
					"description": "The amount of iterations to do for these effects.",
					"type": "integer",
					"default": 1
				},
				"effects": {
					"title": "effects",
					"description": "The effects to play at the location",
					"$ref": "ability_actions.json"
				}
			}
		},
		"wait": {
			"title": "wait",
			"description": "Causes the scene to wait the specified amount of time before continuing to execute actions. Any in-progress actions are not halted. This is in SECONDS and can be a decimal.",
			"type": "number",
			"default": 0.0
		},
		"waitfor": {
			"title": "waitfor",
			"description": "Causes the scene to wait for the specified actor to finish their current scripts before continuing to execute any scene actions. Any in-progress actions are not halted. If the actor specified is invalid, empty, or not spawned in, this action will be ignored.",
			"type": "string"
		},
		"wait_camera": {
			"title": "wait_camera",
			"description": "Causes the scene to wait for the camera to finish pathing its current path before continuing to execute any scene actions. Any in-progress actions are not halted. If the camera is not on any path, or has already finished its path, then this action will be ignored.",
			"type": "boolean",
			"default": true
		}
	}
}