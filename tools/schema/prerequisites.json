{
    "title": "prerequisites",
    "type": "object",
    "defaultProperties": [],
    "additionalProperties": false,
    "properties": {
	    "can_accept_quest": {
			"propertyOrder": 0,
			"title": "can_accept_quest",
			"description": "Checks to see if the player can accept the specified quest. Input the Quest ID of the quest you're checking for. The player can accept the quest if it meets all of the (applicable) requirements. These are set by the Quest automatically depending on what parameters you put in. The prerequisites checked are, but not limited to: Questline progression, Level, previous quests done, prerequisites defined by the Quest file. This will automatically return false if the player already has this quest, or they have completed this quest.",
			"type": "string",
			"default": "quest_id"
		},
		"is_quest_completed": {
			"propertyOrder": 0,
			"title": "is_quest_completed",
			"description": "Checks to see if the player has completed the following quest. Input the Quest ID you're checking for.",
			"type": "string",
			"default": "quest_id"
		},
		"is_on_quest_stage": {
			"propertyOrder": 0,
			"title": "is_on_quest_stage",
			"description": "Checks to see if the player is on the specified stage for the following quest. Input the Quest ID you're checking for. This will always return false if the player has the quest completed. If you need to check if the player has a certain quest completed, use the 'is_quest_completed' prerequisite.",
			"type": "object",
			"properties": {
				"quest_id": {
					"title": "quest_id",
					"description": "The Quest ID that we're checking.",
					"type": "string"
				},
				"quest_stage": {
					"title": "quest_stage",
					"description": "The Quest Stage we are checking to see if the player is currently on it.",
					"type": "integer",
					"default": 1
				}
			}
		},
		"check_quest_objectives": {
            "propertyOrder": 0,
            "title": "check_quest_objectives",
            "description": "Checks that the player has the specified Quest Objective value(s) in the specified Quest Stage. Click Properties, then type in the Quest Objective ID in the input box and click the 'add' button. Quest Objective ids are case-sensitive",
            "type": "array",
			"items": {
                "type": "object",
				"properties": {
				    "quest_id": {
						"title": "Quest ID",
						"type": "string"
					},
					"quest_stage": {
						"title": "quest_stage",
						"description": "The stage that is being checked. Use -1 if the current stage that the player is on is being checked",
						"type": "integer",
						"default": -1
					},
					"quest_objectives": {
					    "type": "object",
						"patternProperties": {
							".*": {
								"headerTemplate": "{{i}}",
								"options": {
									"keep_oneof_values": false
								},
								"oneOf": [
									{
										"title": "Exactly",
										"$ref": "score.json"
									},
									{
										"title": "Range",
										"type": "object",
										"properties": {
											"min": {
												"title": "Minimum",
												"$ref": "score.json"
											},
											"max": {
												"title": "Maximum",
												"$ref": "score.json"
											}
										}
									}
								]
							}
						}
					}
				}
            }
		},
        "check_scores": {
            "propertyOrder": 1,
            "title": "check_scores",
            "description": "Checks that the player has the specified scoreboard value(s). Click Properties, then type in the scoreboard name in the input box and click the 'add' button. Scoreboards are case-sensitive",
            "type": "object",
            "patternProperties": {
                ".*": {
                    "headerTemplate": "{{i}}",
                    "options": {
                        "keep_oneof_values": false
                    },
                    "oneOf": [
                        {
                            "title": "Exactly",
                            "$ref": "score.json"
                        },
                        {
                            "title": "Range",
                            "type": "object",
                            "properties": {
                                "min": {
                                    "title": "Minimum",
                                    "$ref": "score.json"
                                },
                                "max": {
                                    "title": "Maximum",
                                    "$ref": "score.json"
                                }
                            }
                        },
                        {
                            "title": "Matches score",
                            "type": "string"
                        }
                    ]
                }
            }
        },
		"check_questdata": {
            "propertyOrder": 2,
            "title": "check_questdata",
            "description": "Checks that the player has the specified Quest Data value(s). Click Properties, then type in the scoreboard name in the input box and click the 'add' button. Quest Data ids are not case-sensitive",
            "type": "array",
			"items": {
                "type": "object",
				"properties": {
				    "quest_id": {
						"title": "Quest ID",
						"type": "string"
					},
					"completed": {
						"title": "completed",
						"description": "Use to check whether this quest is completed or not. You HAVE to use an integer. (0 = Doesn't matter, 1 = Is Completed?, 2 = Is NOT Completed?)",
						"type": "integer",
						"default": 0
					},
					"quest_data_fields": {
					    "type": "object",
						"patternProperties": {
							".*": {
								"headerTemplate": "{{i}}",
								"options": {
									"keep_oneof_values": false
								},
								"oneOf": [
									{
										"title": "Exactly",
										"$ref": "score.json"
									},
									{
										"title": "Range",
										"type": "object",
										"properties": {
											"min": {
												"title": "Minimum",
												"$ref": "score.json"
											},
											"max": {
												"title": "Maximum",
												"$ref": "score.json"
											}
										}
									}
								]
							}
						}
					}
				}
            }
		},
		"check_shard_objectives": {
            "propertyOrder": 2,
            "title": "check_shard_objectives",
            "description": "Checks the player's current Shard to see if the objective is completed.",
			"type": "object",
			"properties": {
				"objective_id": {
					"title": "objective_id",
					"type": "string"
				},
				"completed": {
					"title": "completed",
					"description": "Whether or not this Shard Objective needs to be completed.",
					"type": "boolean",
					"default": false
				}
			}
		},
        "check_advancements": {
            "propertyOrder": 2,
            "title": "check_advancements",
            "description": "Check if the player has that advancement; if an advancement starts with !, check if the player does not have that advancement",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "check_tags": {
            "propertyOrder": 3,
            "title": "check_tags",
            "description": "Check if the player has that tag; if a listed tag starts with !, check if the player does not have that tag instead",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
		"check_level": {
            "propertyOrder": 1,
            "title": "check_level",
            "description": "Checks if the player is a certain level",
            "type": "object",
			"oneOf": [
				{
					"title": "Exactly",
					"type": "integer"
				},
				{
					"title": "Range",
					"type": "object",
					"properties": {
						"min": {
							"title": "Minimum",
							"$ref": "score.json"
						},
						"max": {
							"title": "Maximum",
							"$ref": "score.json"
						}
					}
				}
			]
        },
		"check_class": {
            "propertyOrder": 3,
            "title": "check_class",
            "description": "Check if the player is a certain class. Valid Class IDs: Warrior, Ranger, Caster, Rogue, Cleric",
            "type": "string"
        },
		"check_shard": {
            "propertyOrder": 3,
            "title": "check_shard",
            "description": "Check if the player is inside a specific Shard. Shard IDs are case-sensitive!",
            "type": "string"
        },
        "items_in_inventory": {
            "propertyOrder": 4,
            "title": "items_in_inventory",
            "description": "Checks that all of the specified items are present in the player's inventory",
            "type": "array",
            "minItems": 1,
            "items": {
                "title": "Item",
                "description": "Checks that a specific item stack exists in the player's inventory. All conditions given here must match to succeed. All fields are optional, but at least one of (lore|name|type) must be specified. Items found are not removed.",
                "$ref": "item.json"
            }
        },
        "item_in_hand": {
            "propertyOrder": 5,
            "title": "item_in_hand",
            "description": "Checks that all of the conditions match for the item in the player's main hand",
            "type": "array",
            "minItems": 1,
            "items": {
                "title": "Item",
                "description": "Checks that a specific item stack exists in the player's inventory. All conditions given here must match to succeed. All fields are optional, but at least one of (lore|name|type) must be specified. Items found are not removed.",
                "$ref": "item.json"
            }
        },
        "item_in_off_hand": {
            "propertyOrder": 6,
            "title": "item_in_off_hand",
            "description": "Checks that all of the conditions match for the item in the player's off hand",
            "type": "array",
            "minItems": 1,
            "items": {
                "title": "Item",
                "description": "Checks that a specific item stack exists in the player's inventory. All conditions given here must match to succeed. All fields are optional, but at least one of (lore|name|type) must be specified. Items found are not removed.",
                "$ref": "item.json"
            }
        },
        "item_in_either_hand": {
            "propertyOrder": 7,
            "title": "item_in_either_hand",
            "description": "Checks that all of the conditions match for the item in the player's main hand or off hand",
            "type": "array",
            "minItems": 1,
            "items": {
                "title": "Item",
                "description": "Checks that a specific item stack exists in the player's inventory. All conditions given here must match to succeed. All fields are optional, but at least one of (lore|name|type) must be specified. Items found are not removed.",
                "$ref": "item.json"
            }
        },
	    "timer_cooldown": {
            "title": "timer_cooldown",
            "description": "Checks if the player is on the cooldown for the specified timer and timer tag",
			"properties": {
				"timer_id": {
					"title": "Timer ID",
					"description": "The ID of the Timer",
					"type": "string"
				},
				"timer_tags": {
					"title": "timer_tags",
					"description": "The tags to check for on this timer.",
					"type": "array",
					"items": {
						"title": "Timer Tag",
						"type": "string"
					}
				}
			},
            "type": "object"
        },
        "location": {
            "propertyOrder": 8,
            "$ref": "location.json"
        },
        "test_for_block": {
            "propertyOrder": 9,
            "title": "test_for_block",
            "description": "Checks that the block at x y z is the specified material. Will test on the current world the player is in. WILL FAIL IF CHUNK IS NOT LOADED!",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "x": {
                    "required": true,
                    "$ref": "coordinate.json",
                    "propertyOrder": 1
                },
                "y": {
                    "required": true,
                    "$ref": "coordinate.json",
                    "propertyOrder": 2
                },
                "z": {
                    "required": true,
                    "$ref": "coordinate.json",
                    "propertyOrder": 3
                },
                "type": {
                    "required": true,
                    "title": "type",
                    "description": "Matches if the item type is exactly this Material. List of available materials can be found here: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Material.html",
                    "type": "string",
                    "propertyOrder": 4
                }
            }
        },
        "is_fully_healed": {
            "propertyOrder": 10,
            "title": "is_fully_healed",
            "description": "If checked, succeeds if the entity is at full health; if not checked, succeeds if not at full health",
            "type": "boolean",
            "format": "checkbox",
            "default": "true"
        },
        "is_sneaking": {
            "propertyOrder": 11,
            "title": "is_sneaking",
            "description": "If checked, succeeds if the player is sneaking; if not checked, succeeds if not sneaking",
            "type": "boolean",
            "format": "checkbox",
            "default": "true"
        },
        "gamemode": {
            "propertyOrder": 12,
            "title": "gamemode",
            "description": "Succeeds if the player is in one of the checked gamemodes",
            "type": "array",
            "format": "checkbox",
            "uniqueItems": true,
            "items": {
                "type": "string",
                "enum": [
                    "survival",
                    "creative",
                    "adventure",
                    "spectator"
                ]
            }
        },
        "use_npc_for_prereqs": {
            "propertyOrder": 13,
            "title": "use_npc_for_prereqs",
            "description": "All nested items use the NPC (instead of the player) for prereq checks. Use this to check if the NPC itself has scores, tags, etc. This only works when the NPC actually exists - such as when trading with an NPC or interacting with one directly by hitting them. This will NOT work when this interaction was started by /interactnpc commands or actions. Also does NOT work with inventory-related things such as item in hand/inventory.",
            "type": "object",
            "$ref": "prerequisites.json"
        },
        "and": {
            "propertyOrder": 14,
            "title": "and",
            "description": "Returns true if all contained prerequisites are true, false otherwise",
            "type": "object",
            "$ref": "prerequisites.json"
        },
        "or": {
            "propertyOrder": 15,
            "title": "or",
            "description": "Returns true if any contained prerequisite is true, false otherwise",
            "type": "object",
            "$ref": "prerequisites.json"
        },
        "not_and": {
            "propertyOrder": 16,
            "title": "not_and",
            "description": "Returns true if any contained prerequisite is false, false otherwise",
            "type": "object",
            "$ref": "prerequisites.json"
        },
        "not_or": {
            "propertyOrder": 17,
            "title": "not_or",
            "description": "Returns true if all contained prerequisites are false, false otherwise",
            "type": "object",
            "$ref": "prerequisites.json"
        },
        "only_one_of": {
            "propertyOrder": 18,
            "title": "only_one_of",
            "description": "Returns true if exactly one contained prerequisite is true, false otherwise",
            "type": "object",
            "$ref": "prerequisites.json"
        }
    }
}
